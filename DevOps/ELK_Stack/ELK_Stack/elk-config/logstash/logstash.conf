input {
   beats {
      port => 5044
   }
}

filter {
  # Parse Python log format
  grok {
    match => { "message" => "(?<loglevel>INFO|ERROR|DEBUG):(?<logger>[^:]+):(?<log_message>.*)" }
  }

  # Extract specific events for cache status
  if [log_message] =~ "Cache" {
    grok {
      match => { "log_message" => "Cache (?<cache_status>HIT|MISS).*?(?:For - )(?<city>[^(\s]+)" }
    }
  }

  # Extract city names from weather requests
  if [log_message] =~ "Starting Weather Request" {
    grok {
      match => { "log_message" => "Starting Weather Request For - (?<requested_city>[^\s]+)" }
    }
  }

  # Extract API errors
  if [loglevel] == "ERROR" {
    grok {
      match => { "log_message" => "API Error For City (?<error_city>[^:]+): (?<error_message>.*)" }
    }
  }

  # Add timestamp for better time-based analysis
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
}

output {
   elasticsearch {
      hosts => "http://elasticsearch:9200"
      index => "weather-app-logstash-%{+YYYY.MM.DD}"
      user => "elastic"
      password => "password"
   }
}
